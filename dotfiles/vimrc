" Vim config file "

set nocompatible

set clipboard=unnamed

" Netrw
filetype plugin on
let g:netrw_banner=0
let g:netrw_browse_split=0
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_winsize=50

" Autocomplete
set completeopt=menuone
set complete=.,w,b,u,i
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Switch buffers
nnoremap <c-tab> :bnext<cr>
nnoremap <c-s-tab> :bNext<cr>

" Appearance
syntax on

if has("gui_running")
    " set guifont=Cascadia\ Mono\ 10
    set guifont=Cascadia\ Mono:h10:cANSI
    set guioptions=cdg
    colorscheme vscode-dark
else
    set t_Co=256
    colorscheme quiet
    set background=dark
endif

set backspace=2
set backspace=indent,eol,start

" Disable beeping and blinking
set noeb vb t_vb=
autocmd GUIEnter * set vb t_vb=

" Show non printing characters
set listchars=tab:>\ ,trail:~,extends:>,precedes:<,space:.,nbsp:_

" Editor settings
set cursorline
set ignorecase
set incsearch
set hlsearch
set number
set list

" Status line
set noshowmode
set laststatus=2
set statusline=%<[%{GetEditorMode()}]\ %t\ %q%w%m%r%=ln\ %l,\ col\ %c\ %{GetTabType()}\ %{&enc}\ %{&ff}\ %{&ft}\ %P

" Linebreak setting
set iskeyword=@,48-57,_,192-255
set nowrap
set display=lastline
set textwidth=0
set wrapmargin=0

" Menu
set path+=**
set showcmd
set wildmenu
set wildmode=full:lastused
set wildoptions=pum

" Disable mouse
set mouse=

" Split
set splitbelow
set splitright

" Indentation settings
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4

" By default, use tabs characters.
set noexpandtab

" Determines whether to use spaces or tabs on the current buffer.
function! TabsOrSpaces()
    if getfsize(bufname("%")) > 256000
        return
    endif

    let numTabs=len(filter(getbufline(bufname("%"), 1, 250), 'v:val =~ "^\\t"'))
    let numSpaces=len(filter(getbufline(bufname("%"), 1, 250), 'v:val =~ "^ "'))

    if numTabs < numSpaces
        setlocal expandtab
    endif
endfunction

" Call the function after opening a buffer
autocmd VimEnter,BufEnter,BufReadPost * call TabsOrSpaces()

function! GetTabType()
    if &expandtab
        return 'space'
    else
        return 'tab'
    endif
endfunction

function! GetEditorMode()
    let l:mode=mode()
    if l:mode ==# "n"
        return "NORMAL"
    elseif l:mode ==# "v" || l:mode ==# "V" || l:mode ==# ""
        return "VISUAL"
    elseif l:mode ==# "i"
        return "INSERT"
    elseif l:mode ==# "R"
        return "REPLACE"
    elseif l:mode ==# "s" || l:mode ==# "S" || l:mode ==# ""
        return "SELECT"
    elseif l:mode ==# "t"
        return "TERMINAL"
    elseif l:mode ==# "c" || l:mode ==# "r"
        return "COMMAND"
    elseif l:mode ==# "!" || l:mode ==# "t"
        return "SHELL"
    endif
    return ""
endfunction

" Defold
autocmd BufNewFile,BufRead *.script set filetype=lua
autocmd BufNewFile,BufRead *.gui_script set filetype=lua
autocmd BufNewFile,BufRead *.render_script set filetype=lua
autocmd BufNewFile,BufRead *.editor_script set filetype=lua

" Autosave session on exit
let g:session = '~/.vimsession'

function! SaveSession()
    if v:this_session != ''
        execute 'mksession! ' . v:this_session
    else
        execute 'mksession! ' . g:session
    endif
endfunction

autocmd VimLeavePre * call SaveSession()

" LSP client settings

" For Windows
set packpath+=$HOME/vimfiles

packadd vim-lsp

autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'lua',
    \ 'cmd': {server_info->['C:/Users/niema/vimfiles/lua-language-server-3.14.0/bin/lua-language-server.exe']},
    \ 'allowlist': ['lua'],
    \ })

function! s:on_lsp_buffer_enabled() abort
    setlocal tagfunc=lsp#tagfunc
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> grr <plug>(lsp-references)
    nmap <buffer> grn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
endfunction

augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_use_event_queue = 1
let g:lsp_use_native_client = 1
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0

let g:lsp_diagnostics_signs_error = {'text': 'E '}
let g:lsp_diagnostics_signs_warning = {'text': 'W '}
let g:lsp_diagnostics_signs_information = {'text': 'I '}
let g:lsp_diagnostics_signs_hint = {'text': 'H '}
let g:lsp_document_code_action_signs_hint = {'text': 'A '}

highlight LspErrorHighlight gui=undercurl guisp=red ctermbg=red
highlight LspWarningHighlight gui=undercurl guisp=yellow ctermbg=yellow
highlight LspInformationHighlight gui=undercurl guisp=blue ctermbg=blue
highlight LspHintHighlight gui=undercurl guisp=blue ctermbg=blue

