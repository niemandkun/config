" Vim config file "

set nocompatible

set clipboard=unnamed

" Netrw
filetype plugin on
let g:netrw_banner=0
let g:netrw_browse_split=0
let g:netrw_altv=1
let g:netrw_liststyle=0
let g:netrw_winsize=50

" Autocomplete
set completeopt=menuone
set complete=.,w,b,u,i
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Appearance
syntax on

if has("gui_running")
    set guifont=Cascadia\ Mono\ 10
    " set guifont=Cascadia\ Mono:h10:cANSI
    set guioptions=cdg
    colorscheme slate
else
    set t_Co=256
    colorscheme slate
    set background=dark
endif

set backspace=2
set backspace=indent,eol,start

" Disable beeping and blinking
set noeb vb t_vb=
autocmd GUIEnter * set vb t_vb=

" Show non printing characters
set listchars=tab:>\ ,trail:~,extends:>,precedes:<,space:.,nbsp:_

" Editor settings
set cursorline
set ignorecase
set incsearch
set hlsearch
set number
set list

" Status line
set laststatus=2
set statusline=%<%t\ %q%w%m%r%=ln\ %l,\ col\ %c\ %{GetTabType()}\ %{&enc}\ %{&ff}\ %{&ft}\ %P

" Linebreak setting
set iskeyword=@,48-57,_,192-255
set nowrap
" set linebreak
set display=lastline
set textwidth=0
set wrapmargin=0

" Menu
set path+=**
set showcmd
set wildmenu
set wildmode=list:longest,full

" Remove trailing whitespaces
" autocmd BufWritePre * :%s/\s\+$//e

" Highlight overlength lines
" highlight OverLength ctermfg=red guifg=red
" match OverLength /\%120v.*/

" Disable mouse
set mouse=

" Split
set splitbelow
set splitright

" Indentation settings
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4

" By default, use tabs characters.
set noexpandtab

" Determines whether to use spaces or tabs on the current buffer.
function! TabsOrSpaces()
    if getfsize(bufname("%")) > 256000
        return
    endif

    let numTabs=len(filter(getbufline(bufname("%"), 1, 250), 'v:val =~ "^\\t"'))
    let numSpaces=len(filter(getbufline(bufname("%"), 1, 250), 'v:val =~ "^ "'))

    if numTabs < numSpaces
        setlocal expandtab
    endif
endfunction

function! GetTabType()
    if &expandtab
        return 'space'
    else
        return 'tab'
    endif
endfunction

" Call the function after opening a buffer
autocmd VimEnter,BufEnter,BufReadPost * call TabsOrSpaces()

" Defold
autocmd BufNewFile,BufRead *.script set filetype=lua
autocmd BufNewFile,BufRead *.gui_script set filetype=lua
autocmd BufNewFile,BufRead *.editor_script set filetype=lua

" Autosave session on exit
let g:session = '~/.vimsession'

function! SaveSession()
    if v:this_session != ''
        execute 'mksession! ' . v:this_session
    else
        execute 'mksession! ' . g:session
    endif
endfunction

autocmd VimLeavePre * call SaveSession()

" LSP client settings

" For Windows
set packpath+=$HOME/vimfiles

packadd lsp

" Lua language server
call LspAddServer([#{
    \    name: 'lua',
    \    filetype: ['lua'],
    \    path: 'C:/Users/niema/vimfiles/lua-language-server-3.14.0/bin/lua-language-server.exe',
    \    workspaceConfig: #{
    \      Lua: #{
    \        hint: #{
    \          enable: v:true,
    \        }
    \      }
    \    }
    \  }])

nnoremap grn :LspRename<CR>
nnoremap gra :LspCodeAction<CR>
nnoremap grd :LspGotoDefinition<CR>
nnoremap grr :LspPeekReferences<CR>
nnoremap gri :LspPeekImpl<CR>
nnoremap gO :LspDocumentSymbol<CR>
nnoremap <C-s> :LspShowSignature<CR>
nnoremap K :LspHover<CR>
nnoremap J :LspDiagCurrent<CR>

setlocal tagfunc=lsp#lsp#TagFunc
setlocal formatexpr=lsp#lsp#FormatExpr()

autocmd User LspSetup LspOptionsSet({popupBorder: true})

